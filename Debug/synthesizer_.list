
synthesizer_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002984  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b14  08002b14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b14  08002b14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08002b28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002b28  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2dd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6e  00000000  00000000  0002b312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002cd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017877  00000000  00000000  0002df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afdd  00000000  00000000  000457ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088faa  00000000  00000000  000507cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d8  00000000  00000000  000d97cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a78 	.word	0x08002a78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a78 	.word	0x08002a78

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
void receive_SPI_data(void);



int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
  config_typedef config = {
 8000166:	4a2a      	ldr	r2, [pc, #168]	; (8000210 <main+0xb0>)
 8000168:	463b      	mov	r3, r7
 800016a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800016e:	e883 0003 	stmia.w	r3, {r0, r1}
		  .frequency = 0xaaaaaaaa,
		  .power_mode = 0x01
  };
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000172:	f000 fbcf 	bl	8000914 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000176:	f000 f943 	bl	8000400 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017a:	f000 fa2f 	bl	80005dc <MX_GPIO_Init>
  MX_ADC1_Init();
 800017e:	f000 f9a7 	bl	80004d0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000182:	f000 f9cb 	bl	800051c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000186:	f000 f9ff 	bl	8000588 <MX_USART2_UART_Init>
  /* Initialize interrupts */
  MX_NVIC_Init();
 800018a:	f000 f994 	bl	80004b6 <MX_NVIC_Init>
 // read_config_from_flash(&config);// read configuration saved in flash after power on
  /*сделали функцию конфигурации в зависимости от запомненных значений*/


  //далее инициализировали прием команд с прерыванием
  HAL_UART_Receive_IT(&huart2, &Rx_buf[Rx_index], 1 ); //initialize first symbol receive
 800018e:	4b21      	ldr	r3, [pc, #132]	; (8000214 <main+0xb4>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	461a      	mov	r2, r3
 8000194:	4b20      	ldr	r3, [pc, #128]	; (8000218 <main+0xb8>)
 8000196:	4413      	add	r3, r2
 8000198:	2201      	movs	r2, #1
 800019a:	4619      	mov	r1, r3
 800019c:	481f      	ldr	r0, [pc, #124]	; (800021c <main+0xbc>)
 800019e:	f001 fe9a 	bl	8001ed6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  while (1)
  {
	  switch (command) {
 80001a2:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <main+0xc0>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	3b01      	subs	r3, #1
 80001a8:	2b05      	cmp	r3, #5
 80001aa:	d82f      	bhi.n	800020c <main+0xac>
 80001ac:	a201      	add	r2, pc, #4	; (adr r2, 80001b4 <main+0x54>)
 80001ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b2:	bf00      	nop
 80001b4:	080001cd 	.word	0x080001cd
 80001b8:	0800020d 	.word	0x0800020d
 80001bc:	0800020d 	.word	0x0800020d
 80001c0:	080001f5 	.word	0x080001f5
 80001c4:	08000201 	.word	0x08000201
 80001c8:	0800020d 	.word	0x0800020d
	  case 1: //freq
		  Tx_buf[Tx_buf_size] = "Enter frequency (format xxx.x)";
 80001cc:	4915      	ldr	r1, [pc, #84]	; (8000224 <main+0xc4>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <main+0xc8>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	461a      	mov	r2, r3
 80001d4:	b2c9      	uxtb	r1, r1
 80001d6:	4b15      	ldr	r3, [pc, #84]	; (800022c <main+0xcc>)
 80001d8:	5499      	strb	r1, [r3, r2]
		  HAL_UART_Transmit(&huart2,  Tx_buf, Tx_buf_size, HAL_MAX_DELAY);
 80001da:	4b13      	ldr	r3, [pc, #76]	; (8000228 <main+0xc8>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b29a      	uxth	r2, r3
 80001e0:	f04f 33ff 	mov.w	r3, #4294967295
 80001e4:	4911      	ldr	r1, [pc, #68]	; (800022c <main+0xcc>)
 80001e6:	480d      	ldr	r0, [pc, #52]	; (800021c <main+0xbc>)
 80001e8:	f001 fdf2 	bl	8001dd0 <HAL_UART_Transmit>
				   * передаем сообщение "Enter frequency" с МК,
				   * ждем значение частоты
				   *
				   */

	   command = 0;  //reset indicator so in next cycle NOOP if new command wasn't received
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <main+0xc0>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
	  // а если прерывание произошло тут, то в следующем цикле будет отработана команда пришедшая
	  break;
 80001f2:	e00c      	b.n	800020e <main+0xae>
		  /*достаем по SPI=
			*
		    * */
	  	  break;
	  case 4: //Power_down
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //resetting pin turn synthesizer in power down mode
 80001f4:	2200      	movs	r2, #0
 80001f6:	2120      	movs	r1, #32
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0xd0>)
 80001fa:	f001 f839 	bl	8001270 <HAL_GPIO_WritePin>
	           /*
			   * записываем во флеш то, что выключили, чтобы при пропадании питания и включении микруха так же была pwr_down
			   *
			   * */
	  	  break;
 80001fe:	e006      	b.n	800020e <main+0xae>
	  case 5: //power_up
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //resetting pin turn synthesizer in power down mode
 8000200:	2201      	movs	r2, #1
 8000202:	2120      	movs	r1, #32
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <main+0xd0>)
 8000206:	f001 f833 	bl	8001270 <HAL_GPIO_WritePin>
			  /*
			   * записываем во флеш то, что включили, чтобы при пропадании питания и включении микруха так же была pwr_down
			   *
			   * */
	  	  break;
 800020a:	e000      	b.n	800020e <main+0xae>
			   * записали во флеш
			   * запустили функцию конфигурации по SP
			   * */
	  	  break;
	  default:
		  break;
 800020c:	bf00      	nop
	  switch (command) {
 800020e:	e7c8      	b.n	80001a2 <main+0x42>
 8000210:	08002ab0 	.word	0x08002ab0
 8000214:	20000029 	.word	0x20000029
 8000218:	20000080 	.word	0x20000080
 800021c:	20000100 	.word	0x20000100
 8000220:	2000002b 	.word	0x2000002b
 8000224:	08002a90 	.word	0x08002a90
 8000228:	2000002c 	.word	0x2000002c
 800022c:	20000030 	.word	0x20000030
 8000230:	40011000 	.word	0x40011000

08000234 <HAL_UART_RxCpltCallback>:
}


/*callback function to process receive operation*/
/*calls with interrupt after receiving 1 byte of message*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

  // check for command termination character
  if ((Rx_buf[Rx_index] != '\r') | (Rx_buf[Rx_index] != '\n')) {
 800023c:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <HAL_UART_RxCpltCallback+0x70>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	461a      	mov	r2, r3
 8000242:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <HAL_UART_RxCpltCallback+0x74>)
 8000244:	5c9b      	ldrb	r3, [r3, r2]
 8000246:	2b0d      	cmp	r3, #13
 8000248:	bf14      	ite	ne
 800024a:	2301      	movne	r3, #1
 800024c:	2300      	moveq	r3, #0
 800024e:	b2da      	uxtb	r2, r3
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <HAL_UART_RxCpltCallback+0x70>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4619      	mov	r1, r3
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <HAL_UART_RxCpltCallback+0x74>)
 8000258:	5c5b      	ldrb	r3, [r3, r1]
 800025a:	2b0a      	cmp	r3, #10
 800025c:	bf14      	ite	ne
 800025e:	2301      	movne	r3, #1
 8000260:	2300      	moveq	r3, #0
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4313      	orrs	r3, r2
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2b00      	cmp	r3, #0
 800026a:	d010      	beq.n	800028e <HAL_UART_RxCpltCallback+0x5a>
    // Continue receiving if the termination character is not received
	  Rx_index++;//первый символ уже принят, произошло прерывание, которое привело нас сюда
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <HAL_UART_RxCpltCallback+0x70>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <HAL_UART_RxCpltCallback+0x70>)
 8000276:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart2, &Rx_buf[Rx_index], 1);  // Receive next byte
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <HAL_UART_RxCpltCallback+0x70>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	461a      	mov	r2, r3
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <HAL_UART_RxCpltCallback+0x74>)
 8000280:	4413      	add	r3, r2
 8000282:	2201      	movs	r2, #1
 8000284:	4619      	mov	r1, r3
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <HAL_UART_RxCpltCallback+0x78>)
 8000288:	f001 fe25 	bl	8001ed6 <HAL_UART_Receive_IT>
	  Rx_index = 0;
	  msg_received = 1;

}

}
 800028c:	e005      	b.n	800029a <HAL_UART_RxCpltCallback+0x66>
	  Rx_index = 0;
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <HAL_UART_RxCpltCallback+0x70>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
	  msg_received = 1;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_UART_RxCpltCallback+0x7c>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000029 	.word	0x20000029
 80002a8:	20000080 	.word	0x20000080
 80002ac:	20000100 	.word	0x20000100
 80002b0:	2000002a 	.word	0x2000002a

080002b4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

  HAL_UART_IRQHandler(&huart2); //check for some errors, calls callback function
 80002b8:	4845      	ldr	r0, [pc, #276]	; (80003d0 <USART2_IRQHandler+0x11c>)
 80002ba:	f001 fe31 	bl	8001f20 <HAL_UART_IRQHandler>

  /*check for which command was received*/
  if (msg_received == 1) {    //check for received messages
 80002be:	4b45      	ldr	r3, [pc, #276]	; (80003d4 <USART2_IRQHandler+0x120>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	f040 8081 	bne.w	80003cc <USART2_IRQHandler+0x118>
  if (strcmp(Rx_buf, "freq") == 0){   //check for which command was received
 80002ca:	4943      	ldr	r1, [pc, #268]	; (80003d8 <USART2_IRQHandler+0x124>)
 80002cc:	4843      	ldr	r0, [pc, #268]	; (80003dc <USART2_IRQHandler+0x128>)
 80002ce:	f7ff ff3d 	bl	800014c <strcmp>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d10e      	bne.n	80002f6 <USART2_IRQHandler+0x42>
      Tx_buf_size = sizeof("Enter frequency (format xxx.x)");
 80002d8:	4b41      	ldr	r3, [pc, #260]	; (80003e0 <USART2_IRQHandler+0x12c>)
 80002da:	221f      	movs	r2, #31
 80002dc:	701a      	strb	r2, [r3, #0]
	  command = 1; //
 80002de:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <USART2_IRQHandler+0x130>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]

	  msg_received = 0; //reset flag at the end of ISR
 80002e4:	4b3b      	ldr	r3, [pc, #236]	; (80003d4 <USART2_IRQHandler+0x120>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
	  memset(Rx_buf, 0, CMSIZE); //reset RxBuf at the end of ISR
 80002ea:	221e      	movs	r2, #30
 80002ec:	2100      	movs	r1, #0
 80002ee:	483b      	ldr	r0, [pc, #236]	; (80003dc <USART2_IRQHandler+0x128>)
 80002f0:	f002 fbba 	bl	8002a68 <memset>
	  return;
 80002f4:	e06b      	b.n	80003ce <USART2_IRQHandler+0x11a>
  }
	  else if (strcmp(Rx_buf, "temp") == 0){
 80002f6:	493c      	ldr	r1, [pc, #240]	; (80003e8 <USART2_IRQHandler+0x134>)
 80002f8:	4838      	ldr	r0, [pc, #224]	; (80003dc <USART2_IRQHandler+0x128>)
 80002fa:	f7ff ff27 	bl	800014c <strcmp>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d10b      	bne.n	800031c <USART2_IRQHandler+0x68>

	  command =2;
 8000304:	4b37      	ldr	r3, [pc, #220]	; (80003e4 <USART2_IRQHandler+0x130>)
 8000306:	2202      	movs	r2, #2
 8000308:	701a      	strb	r2, [r3, #0]

	  msg_received = 0; //reset flag at the end of ISR
 800030a:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <USART2_IRQHandler+0x120>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
	  memset(Rx_buf, 0, CMSIZE); //reset RxBuf at the end of ISR
 8000310:	221e      	movs	r2, #30
 8000312:	2100      	movs	r1, #0
 8000314:	4831      	ldr	r0, [pc, #196]	; (80003dc <USART2_IRQHandler+0x128>)
 8000316:	f002 fba7 	bl	8002a68 <memset>
	  return;
 800031a:	e058      	b.n	80003ce <USART2_IRQHandler+0x11a>
	  }
	  else if (strcmp(Rx_buf, "Lock_detect") == 0) {
 800031c:	4933      	ldr	r1, [pc, #204]	; (80003ec <USART2_IRQHandler+0x138>)
 800031e:	482f      	ldr	r0, [pc, #188]	; (80003dc <USART2_IRQHandler+0x128>)
 8000320:	f7ff ff14 	bl	800014c <strcmp>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d10b      	bne.n	8000342 <USART2_IRQHandler+0x8e>

	  command = 3;
 800032a:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <USART2_IRQHandler+0x130>)
 800032c:	2203      	movs	r2, #3
 800032e:	701a      	strb	r2, [r3, #0]
	  msg_received = 0; //reset flag at the end of ISR
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <USART2_IRQHandler+0x120>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
	  memset(Rx_buf, 0, CMSIZE); //reset RxBuf at the end of ISR
 8000336:	221e      	movs	r2, #30
 8000338:	2100      	movs	r1, #0
 800033a:	4828      	ldr	r0, [pc, #160]	; (80003dc <USART2_IRQHandler+0x128>)
 800033c:	f002 fb94 	bl	8002a68 <memset>
	 return;
 8000340:	e045      	b.n	80003ce <USART2_IRQHandler+0x11a>
	  }
	  else if(strcmp(Rx_buf,"pwr_down")==0)	  {
 8000342:	492b      	ldr	r1, [pc, #172]	; (80003f0 <USART2_IRQHandler+0x13c>)
 8000344:	4825      	ldr	r0, [pc, #148]	; (80003dc <USART2_IRQHandler+0x128>)
 8000346:	f7ff ff01 	bl	800014c <strcmp>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d10b      	bne.n	8000368 <USART2_IRQHandler+0xb4>

	  command = 4;
 8000350:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <USART2_IRQHandler+0x130>)
 8000352:	2204      	movs	r2, #4
 8000354:	701a      	strb	r2, [r3, #0]

		  msg_received = 0; //reset flag at the end of ISR
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <USART2_IRQHandler+0x120>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
		  memset(Rx_buf, 0, CMSIZE); //reset RxBuf at the end of ISR
 800035c:	221e      	movs	r2, #30
 800035e:	2100      	movs	r1, #0
 8000360:	481e      	ldr	r0, [pc, #120]	; (80003dc <USART2_IRQHandler+0x128>)
 8000362:	f002 fb81 	bl	8002a68 <memset>
	 return;
 8000366:	e032      	b.n	80003ce <USART2_IRQHandler+0x11a>
	  }
	  else if(strcmp(Rx_buf,"pwr_up")==0)	  {
 8000368:	4922      	ldr	r1, [pc, #136]	; (80003f4 <USART2_IRQHandler+0x140>)
 800036a:	481c      	ldr	r0, [pc, #112]	; (80003dc <USART2_IRQHandler+0x128>)
 800036c:	f7ff feee 	bl	800014c <strcmp>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d110      	bne.n	8000398 <USART2_IRQHandler+0xe4>

	  command = 5;
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <USART2_IRQHandler+0x130>)
 8000378:	2205      	movs	r2, #5
 800037a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //resetting pin turn synthesizer in power down mode
 800037c:	2201      	movs	r2, #1
 800037e:	2120      	movs	r1, #32
 8000380:	481d      	ldr	r0, [pc, #116]	; (80003f8 <USART2_IRQHandler+0x144>)
 8000382:	f000 ff75 	bl	8001270 <HAL_GPIO_WritePin>
		  /*
		   * записываем во флеш то, что включили, чтобы при пропадании питания и включении микруха так же была pwr_down
		   *
		   * */
		  msg_received = 0; //reset flag at the end of ISR
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <USART2_IRQHandler+0x120>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
		  memset(Rx_buf, 0, CMSIZE); //reset RxBuf at the end of ISR
 800038c:	221e      	movs	r2, #30
 800038e:	2100      	movs	r1, #0
 8000390:	4812      	ldr	r0, [pc, #72]	; (80003dc <USART2_IRQHandler+0x128>)
 8000392:	f002 fb69 	bl	8002a68 <memset>
	 return;	//возврат из обработчика прерываний
 8000396:	e01a      	b.n	80003ce <USART2_IRQHandler+0x11a>
	  }

	  else if (frequency_received == 1){ //check for frequency value info
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <USART2_IRQHandler+0x148>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d10b      	bne.n	80003ba <USART2_IRQHandler+0x106>

	  command = 6;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <USART2_IRQHandler+0x130>)
 80003a4:	2206      	movs	r2, #6
 80003a6:	701a      	strb	r2, [r3, #0]

	       msg_received = 0; //reset flag at the end of ISR
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <USART2_IRQHandler+0x120>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
		   memset(Rx_buf, 0, CMSIZE); //reset RxBuf at the end of ISR
 80003ae:	221e      	movs	r2, #30
 80003b0:	2100      	movs	r1, #0
 80003b2:	480a      	ldr	r0, [pc, #40]	; (80003dc <USART2_IRQHandler+0x128>)
 80003b4:	f002 fb58 	bl	8002a68 <memset>
 80003b8:	e009      	b.n	80003ce <USART2_IRQHandler+0x11a>
	  }
	  else {
		  msg_received = 0; //reset flag at the end of ISR
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <USART2_IRQHandler+0x120>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
		  memset(Rx_buf, 0, CMSIZE); //reset RxBuf at the end of ISR
 80003c0:	221e      	movs	r2, #30
 80003c2:	2100      	movs	r1, #0
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <USART2_IRQHandler+0x128>)
 80003c6:	f002 fb4f 	bl	8002a68 <memset>
	 return;
 80003ca:	e000      	b.n	80003ce <USART2_IRQHandler+0x11a>
		  /**/
	  }
  }
  else { //if msg_received == 0
	  return;//return from ISR and wait next byte
 80003cc:	bf00      	nop

  }

}
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000100 	.word	0x20000100
 80003d4:	2000002a 	.word	0x2000002a
 80003d8:	08002ab8 	.word	0x08002ab8
 80003dc:	20000080 	.word	0x20000080
 80003e0:	2000002c 	.word	0x2000002c
 80003e4:	2000002b 	.word	0x2000002b
 80003e8:	08002ac0 	.word	0x08002ac0
 80003ec:	08002ac8 	.word	0x08002ac8
 80003f0:	08002ad4 	.word	0x08002ad4
 80003f4:	08002ae0 	.word	0x08002ae0
 80003f8:	40011000 	.word	0x40011000
 80003fc:	20000028 	.word	0x20000028

08000400 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b094      	sub	sp, #80	; 0x50
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f002 fb2a 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000430:	2301      	movs	r3, #1
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000456:	4618      	mov	r0, r3
 8000458:	f000 ff22 	bl	80012a0 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000462:	f000 f941 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f001 f98c 	bl	80017a0 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800048e:	f000 f92b 	bl	80006e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000492:	2302      	movs	r3, #2
 8000494:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800049a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fb0c 	bl	8001abc <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004aa:	f000 f91d 	bl	80006e8 <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3750      	adds	r7, #80	; 0x50
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <MX_NVIC_Init>:

/* NVIC Configuration */
static void MX_NVIC_Init(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2026      	movs	r0, #38	; 0x26
 80004c0:	f000 fc69 	bl	8000d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004c4:	2026      	movs	r0, #38	; 0x26
 80004c6:	f000 fc82 	bl	8000dce <HAL_NVIC_EnableIRQ>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_ADC1_Init>:

/*  ADC1 Initialization Function*/
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0


  hadc1.Instance = ADC1;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_ADC1_Init+0x44>)
 80004d6:	4a10      	ldr	r2, [pc, #64]	; (8000518 <MX_ADC1_Init+0x48>)
 80004d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_ADC1_Init+0x44>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_ADC1_Init+0x44>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_ADC1_Init+0x44>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START; //?
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_ADC1_Init+0x44>)
 80004ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <MX_ADC1_Init+0x44>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_ADC1_Init+0x44>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <MX_ADC1_Init+0x44>)
 8000502:	f000 fa57 	bl	80009b4 <HAL_ADC_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 800050c:	f000 f8ec 	bl	80006e8 <Error_Handler>
  }

}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000050 	.word	0x20000050
 8000518:	40012400 	.word	0x40012400

0800051c <MX_SPI1_Init>:


  /*  SPI1 Initialization Function*/

static void MX_SPI1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_SPI1_Init+0x64>)
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MX_SPI1_Init+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_SPI1_Init+0x64>)
 8000528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800052c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_SPI1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <MX_SPI1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_SPI1_Init+0x64>)
 800053c:	2202      	movs	r2, #2
 800053e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_SPI1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_SPI1_Init+0x64>)
 8000548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_SPI1_Init+0x64>)
 8000550:	2208      	movs	r2, #8
 8000552:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_SPI1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_SPI1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <MX_SPI1_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_SPI1_Init+0x64>)
 8000568:	220a      	movs	r2, #10
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_SPI1_Init+0x64>)
 800056e:	f001 fb5b 	bl	8001c28 <HAL_SPI_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000578:	f000 f8b6 	bl	80006e8 <Error_Handler>
  }


}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000a8 	.word	0x200000a8
 8000584:	40013000 	.word	0x40013000

08000588 <MX_USART2_UART_Init>:


  /*  USART2 Initialization Function*/

static void MX_USART2_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <MX_USART2_UART_Init+0x50>)
 8000590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005c0:	f001 fbb6 	bl	8001d30 <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ca:	f000 f88d 	bl	80006e8 <Error_Handler>
  }

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000100 	.word	0x20000100
 80005d8:	40004400 	.word	0x40004400

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <MX_GPIO_Init+0xf8>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a37      	ldr	r2, [pc, #220]	; (80006d4 <MX_GPIO_Init+0xf8>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <MX_GPIO_Init+0xf8>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0xf8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <MX_GPIO_Init+0xf8>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_GPIO_Init+0xf8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_GPIO_Init+0xf8>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <MX_GPIO_Init+0xf8>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_GPIO_Init+0xf8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_GPIO_Init+0xf8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a25      	ldr	r2, [pc, #148]	; (80006d4 <MX_GPIO_Init+0xf8>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_GPIO_Init+0xf8>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LE_Pin|CE_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2130      	movs	r1, #48	; 0x30
 8000654:	4820      	ldr	r0, [pc, #128]	; (80006d8 <MX_GPIO_Init+0xfc>)
 8000656:	f000 fe0b 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800065a:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 800065e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000660:	2303      	movs	r3, #3
 8000662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	481b      	ldr	r0, [pc, #108]	; (80006d8 <MX_GPIO_Init+0xfc>)
 800066c:	f000 fc7c 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 PA11 PA12
                           PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000670:	f64f 7313 	movw	r3, #65299	; 0xff13
 8000674:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	2303      	movs	r3, #3
 8000678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	4816      	ldr	r0, [pc, #88]	; (80006dc <MX_GPIO_Init+0x100>)
 8000682:	f000 fc71 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LE_Pin CE_Pin */
  GPIO_InitStruct.Pin = LE_Pin|CE_Pin;
 8000686:	2330      	movs	r3, #48	; 0x30
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <MX_GPIO_Init+0xfc>)
 800069e:	f000 fc63 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	2303      	movs	r3, #3
 80006aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0x104>)
 80006b4:	f000 fc58 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006b8:	2304      	movs	r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006bc:	2303      	movs	r3, #3
 80006be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <MX_GPIO_Init+0x108>)
 80006c8:	f000 fc4e 	bl	8000f68 <HAL_GPIO_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40011400 	.word	0x40011400

080006e8 <Error_Handler>:
  */



void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_MspInit+0x5c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x5c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_MspInit+0x60>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_MspInit+0x60>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <HAL_ADC_MspInit+0x34>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d10b      	bne.n	8000782 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_ADC_MspInit+0x38>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_ADC_MspInit+0x38>)
 8000770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_ADC_MspInit+0x38>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40012400 	.word	0x40012400
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a1b      	ldr	r2, [pc, #108]	; (800081c <HAL_SPI_MspInit+0x88>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d12f      	bne.n	8000814 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <HAL_SPI_MspInit+0x8c>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a19      	ldr	r2, [pc, #100]	; (8000820 <HAL_SPI_MspInit+0x8c>)
 80007ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_SPI_MspInit+0x8c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_SPI_MspInit+0x8c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_SPI_MspInit+0x8c>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_SPI_MspInit+0x8c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 80007e4:	23a0      	movs	r3, #160	; 0xa0
 80007e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <HAL_SPI_MspInit+0x90>)
 80007f8:	f000 fbb6 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MUXOUT_Pin;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MUXOUT_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_SPI_MspInit+0x90>)
 8000810:	f000 fbaa 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40013000 	.word	0x40013000
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d12f      	bne.n	80008a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800084e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000852:	61d3      	str	r3, [r2, #28]
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000878:	2304      	movs	r3, #4
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_UART_MspInit+0x90>)
 800088c:	f000 fb6c 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000890:	2308      	movs	r3, #8
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_UART_MspInit+0x90>)
 80008a4:	f000 fb60 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800

080008bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c8:	f7ff fff8 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ce:	490c      	ldr	r1, [pc, #48]	; (8000900 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a09      	ldr	r2, [pc, #36]	; (8000908 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e4:	4c09      	ldr	r4, [pc, #36]	; (800090c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f2:	f002 f895 	bl	8002a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f6:	f7ff fc33 	bl	8000160 <main>
  bx lr
 80008fa:	4770      	bx	lr
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	08002b1c 	.word	0x08002b1c
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	2000014c 	.word	0x2000014c

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_Init+0x28>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_Init+0x28>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 fa2b 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	200f      	movs	r0, #15
 800092c:	f000 f808 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff fee0 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40022000 	.word	0x40022000

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fa43 	bl	8000dea <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 fa0b 	bl	8000d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <HAL_GetTick+0x10>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000148 	.word	0x20000148

080009b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e0be      	b.n	8000b54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff feb0 	bl	8000758 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f8b3 	bl	8000b64 <ADC_ConversionStop_Disable>
 80009fe:	4603      	mov	r3, r0
 8000a00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 8099 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 8095 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	f043 0202 	orr.w	r2, r3, #2
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b1b      	ldrb	r3, [r3, #12]
 8000a3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a4c:	d003      	beq.n	8000a56 <HAL_ADC_Init+0xa2>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_ADC_Init+0xa8>
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	e000      	b.n	8000a5e <HAL_ADC_Init+0xaa>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d1b      	ldrb	r3, [r3, #20]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d119      	bne.n	8000aa0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7b1b      	ldrb	r3, [r3, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	035a      	lsls	r2, r3, #13
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	e00b      	b.n	8000aa0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	f043 0220 	orr.w	r2, r3, #32
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	f043 0201 	orr.w	r2, r3, #1
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_Init+0x1a8>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	6812      	ldr	r2, [r2, #0]
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad0:	d003      	beq.n	8000ada <HAL_ADC_Init+0x126>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	051b      	lsls	r3, r3, #20
 8000ae2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_ADC_Init+0x1ac>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10b      	bne.n	8000b20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	f023 0303 	bic.w	r3, r3, #3
 8000b16:	f043 0201 	orr.w	r2, r3, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b1e:	e018      	b.n	8000b52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	f023 0312 	bic.w	r3, r3, #18
 8000b28:	f043 0210 	orr.w	r2, r3, #16
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	f043 0201 	orr.w	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b40:	e007      	b.n	8000b52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f043 0210 	orr.w	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b60:	ff1f0efe 	.word	0xff1f0efe

08000b64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d12e      	bne.n	8000bdc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0201 	bic.w	r2, r2, #1
 8000b8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b8e:	f7ff ff07 	bl	80009a0 <HAL_GetTick>
 8000b92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b94:	e01b      	b.n	8000bce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b96:	f7ff ff03 	bl	80009a0 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d914      	bls.n	8000bce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10d      	bne.n	8000bce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	f043 0210 	orr.w	r2, r3, #16
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	f043 0201 	orr.w	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e007      	b.n	8000bde <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d0dc      	beq.n	8000b96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4906      	ldr	r1, [pc, #24]	; (8000c80 <__NVIC_EnableIRQ+0x34>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff90 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff2d 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da8:	f7ff ff42 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f7ff ff90 	bl	8000cd8 <NVIC_EncodePriority>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff5f 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff35 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffa2 	bl	8000d3c <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d008      	beq.n	8000e2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e020      	b.n	8000e6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020e 	bic.w	r2, r2, #14
 8000e3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d005      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2204      	movs	r2, #4
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e051      	b.n	8000f40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020e 	bic.w	r2, r2, #14
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_DMA_Abort_IT+0xd4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d029      	beq.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_DMA_Abort_IT+0xd8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d022      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x9e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <HAL_DMA_Abort_IT+0xdc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01a      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x98>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_DMA_Abort_IT+0xe0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d012      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x92>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <HAL_DMA_Abort_IT+0xe4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00a      	beq.n	8000f04 <HAL_DMA_Abort_IT+0x8c>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <HAL_DMA_Abort_IT+0xe8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <HAL_DMA_Abort_IT+0x86>
 8000ef8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efc:	e00e      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f02:	e00b      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f08:	e008      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	e005      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	e002      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f16:	2310      	movs	r3, #16
 8000f18:	e000      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <HAL_DMA_Abort_IT+0xec>)
 8000f1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	4798      	blx	r3
    } 
  }
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020008 	.word	0x40020008
 8000f50:	4002001c 	.word	0x4002001c
 8000f54:	40020030 	.word	0x40020030
 8000f58:	40020044 	.word	0x40020044
 8000f5c:	40020058 	.word	0x40020058
 8000f60:	4002006c 	.word	0x4002006c
 8000f64:	40020000 	.word	0x40020000

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b08b      	sub	sp, #44	; 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e169      	b.n	8001250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8158 	bne.w	800124a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a9a      	ldr	r2, [pc, #616]	; (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d05e      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a98      	ldr	r2, [pc, #608]	; (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d875      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000faa:	4a98      	ldr	r2, [pc, #608]	; (800120c <HAL_GPIO_Init+0x2a4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d058      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fb0:	4a96      	ldr	r2, [pc, #600]	; (800120c <HAL_GPIO_Init+0x2a4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d86f      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fb6:	4a96      	ldr	r2, [pc, #600]	; (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d052      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fbc:	4a94      	ldr	r2, [pc, #592]	; (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d869      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fc2:	4a94      	ldr	r2, [pc, #592]	; (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d04c      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a92      	ldr	r2, [pc, #584]	; (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d863      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fce:	4a92      	ldr	r2, [pc, #584]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d046      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a90      	ldr	r2, [pc, #576]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d85d      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d82a      	bhi.n	8001034 <HAL_GPIO_Init+0xcc>
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d859      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <HAL_GPIO_Init+0x80>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08001063 	.word	0x08001063
 8000fec:	0800103d 	.word	0x0800103d
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	08001091 	.word	0x08001091
 8000ff8:	08001097 	.word	0x08001097
 8000ffc:	08001097 	.word	0x08001097
 8001000:	08001097 	.word	0x08001097
 8001004:	08001097 	.word	0x08001097
 8001008:	08001097 	.word	0x08001097
 800100c:	08001097 	.word	0x08001097
 8001010:	08001097 	.word	0x08001097
 8001014:	08001097 	.word	0x08001097
 8001018:	08001097 	.word	0x08001097
 800101c:	08001097 	.word	0x08001097
 8001020:	08001097 	.word	0x08001097
 8001024:	08001097 	.word	0x08001097
 8001028:	08001097 	.word	0x08001097
 800102c:	08001045 	.word	0x08001045
 8001030:	08001059 	.word	0x08001059
 8001034:	4a79      	ldr	r2, [pc, #484]	; (800121c <HAL_GPIO_Init+0x2b4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800103a:	e02c      	b.n	8001096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e029      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	3304      	adds	r3, #4
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e024      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	3308      	adds	r3, #8
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e01f      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	330c      	adds	r3, #12
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e01a      	b.n	8001098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106a:	2304      	movs	r3, #4
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e013      	b.n	8001098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001078:	2308      	movs	r3, #8
 800107a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	611a      	str	r2, [r3, #16]
          break;
 8001082:	e009      	b.n	8001098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	615a      	str	r2, [r3, #20]
          break;
 800108e:	e003      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x130>
          break;
 8001096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d801      	bhi.n	80010a2 <HAL_GPIO_Init+0x13a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	e001      	b.n	80010a6 <HAL_GPIO_Init+0x13e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2bff      	cmp	r3, #255	; 0xff
 80010ac:	d802      	bhi.n	80010b4 <HAL_GPIO_Init+0x14c>
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x152>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	3b08      	subs	r3, #8
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	210f      	movs	r1, #15
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	6a39      	ldr	r1, [r7, #32]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80b1 	beq.w	800124a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a40      	ldr	r2, [pc, #256]	; (8001228 <HAL_GPIO_Init+0x2c0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1ec>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3f      	ldr	r2, [pc, #252]	; (800122c <HAL_GPIO_Init+0x2c4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1e8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3e      	ldr	r2, [pc, #248]	; (8001230 <HAL_GPIO_Init+0x2c8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1e4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3d      	ldr	r2, [pc, #244]	; (8001234 <HAL_GPIO_Init+0x2cc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1e0>
 8001144:	2303      	movs	r3, #3
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001148:	2304      	movs	r3, #4
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001154:	2300      	movs	r3, #0
 8001156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001166:	492f      	ldr	r1, [pc, #188]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	492c      	ldr	r1, [pc, #176]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	608b      	str	r3, [r1, #8]
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	43db      	mvns	r3, r3
 8001196:	4928      	ldr	r1, [pc, #160]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001198:	4013      	ands	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	4922      	ldr	r1, [pc, #136]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60cb      	str	r3, [r1, #12]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	491e      	ldr	r1, [pc, #120]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4918      	ldr	r1, [pc, #96]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4914      	ldr	r1, [pc, #80]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d021      	beq.n	800123c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	490e      	ldr	r1, [pc, #56]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e021      	b.n	800124a <HAL_GPIO_Init+0x2e2>
 8001206:	bf00      	nop
 8001208:	10320000 	.word	0x10320000
 800120c:	10310000 	.word	0x10310000
 8001210:	10220000 	.word	0x10220000
 8001214:	10210000 	.word	0x10210000
 8001218:	10120000 	.word	0x10120000
 800121c:	10110000 	.word	0x10110000
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000
 8001234:	40011400 	.word	0x40011400
 8001238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_GPIO_Init+0x304>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	43db      	mvns	r3, r3
 8001244:	4909      	ldr	r1, [pc, #36]	; (800126c <HAL_GPIO_Init+0x304>)
 8001246:	4013      	ands	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	3301      	adds	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f ae8e 	bne.w	8000f7c <HAL_GPIO_Init+0x14>
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	372c      	adds	r7, #44	; 0x2c
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	611a      	str	r2, [r3, #16]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e26c      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c0:	4b92      	ldr	r3, [pc, #584]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d00c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012cc:	4b8f      	ldr	r3, [pc, #572]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d112      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
 80012d8:	4b8c      	ldr	r3, [pc, #560]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d10b      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e6:	4b89      	ldr	r3, [pc, #548]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d06c      	beq.n	80013cc <HAL_RCC_OscConfig+0x12c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d168      	bne.n	80013cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e246      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x76>
 8001308:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a7f      	ldr	r2, [pc, #508]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e02e      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b7b      	ldr	r3, [pc, #492]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7a      	ldr	r2, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b78      	ldr	r3, [pc, #480]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a77      	ldr	r2, [pc, #476]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0xbc>
 8001342:	4b72      	ldr	r3, [pc, #456]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a71      	ldr	r2, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6f      	ldr	r3, [pc, #444]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6e      	ldr	r2, [pc, #440]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6a      	ldr	r2, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a67      	ldr	r2, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fb10 	bl	80009a0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fb0c 	bl	80009a0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1fa      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5d      	ldr	r3, [pc, #372]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xe4>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fafc 	bl	80009a0 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff faf8 	bl	80009a0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1e6      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x10c>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x18c>
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x176>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1ba      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4939      	ldr	r1, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff fab1 	bl	80009a0 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff faad 	bl	80009a0 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e19b      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fa90 	bl	80009a0 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fa8c 	bl	80009a0 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e17a      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03a      	beq.n	8001524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d019      	beq.n	80014ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_RCC_OscConfig+0x274>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fa70 	bl	80009a0 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fa6c 	bl	80009a0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e15a      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 facc 	bl	8001a80 <RCC_Delay>
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x274>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fa56 	bl	80009a0 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f6:	e00f      	b.n	8001518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fa52 	bl	80009a0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d908      	bls.n	8001518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e140      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	42420000 	.word	0x42420000
 8001514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b9e      	ldr	r3, [pc, #632]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1e9      	bne.n	80014f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a6 	beq.w	800167e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b97      	ldr	r3, [pc, #604]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10d      	bne.n	800155e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b94      	ldr	r3, [pc, #592]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a93      	ldr	r2, [pc, #588]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b91      	ldr	r3, [pc, #580]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <HAL_RCC_OscConfig+0x4f8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x4f8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a8a      	ldr	r2, [pc, #552]	; (8001798 <HAL_RCC_OscConfig+0x4f8>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fa13 	bl	80009a0 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fa0f 	bl	80009a0 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0fd      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x4f8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x312>
 80015a4:	4b7b      	ldr	r3, [pc, #492]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a7a      	ldr	r2, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e02d      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x334>
 80015ba:	4b76      	ldr	r3, [pc, #472]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a75      	ldr	r2, [pc, #468]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	4b73      	ldr	r3, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a72      	ldr	r2, [pc, #456]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	e01c      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x356>
 80015dc:	4b6d      	ldr	r3, [pc, #436]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a6c      	ldr	r2, [pc, #432]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a66      	ldr	r2, [pc, #408]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	4b64      	ldr	r3, [pc, #400]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a63      	ldr	r2, [pc, #396]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d015      	beq.n	8001642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff f9c3 	bl	80009a0 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff f9bf 	bl	80009a0 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0ab      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001634:	4b57      	ldr	r3, [pc, #348]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ee      	beq.n	800161e <HAL_RCC_OscConfig+0x37e>
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff f9ad 	bl	80009a0 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff f9a9 	bl	80009a0 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	; 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e095      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d105      	bne.n	800167e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8081 	beq.w	800178a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d061      	beq.n	8001758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d146      	bne.n	800172a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_OscConfig+0x4fc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff f97d 	bl	80009a0 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff f979 	bl	80009a0 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e067      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d108      	bne.n	80016e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	492d      	ldr	r1, [pc, #180]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a19      	ldr	r1, [r3, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	430b      	orrs	r3, r1
 80016f6:	4927      	ldr	r1, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x4fc>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff f94d 	bl	80009a0 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f949 	bl	80009a0 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e037      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x46a>
 8001728:	e02f      	b.n	800178a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_RCC_OscConfig+0x4fc>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff f936 	bl	80009a0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff f932 	bl	80009a0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e020      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x498>
 8001756:	e018      	b.n	800178a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e013      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	429a      	cmp	r2, r3
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	42420060 	.word	0x42420060

080017a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0d0      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b6a      	ldr	r3, [pc, #424]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d910      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b67      	ldr	r3, [pc, #412]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	4965      	ldr	r1, [pc, #404]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a52      	ldr	r2, [pc, #328]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800181e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d040      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d115      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e073      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06b      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f023 0203 	bic.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4936      	ldr	r1, [pc, #216]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001890:	f7ff f886 	bl	80009a0 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	e00a      	b.n	80018ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff f882 	bl	80009a0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e053      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 020c 	and.w	r2, r3, #12
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1eb      	bne.n	8001898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d210      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 0207 	bic.w	r2, r3, #7
 80018d6:	4922      	ldr	r1, [pc, #136]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1cc>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1d0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fff6 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000
 8001964:	40021000 	.word	0x40021000
 8001968:	08002ae8 	.word	0x08002ae8
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b04      	cmp	r3, #4
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x30>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x36>
 80019a2:	e027      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019a6:	613b      	str	r3, [r7, #16]
      break;
 80019a8:	e027      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0c5b      	lsrs	r3, r3, #17
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019d6:	fb02 f203 	mul.w	r2, r2, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e004      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	613b      	str	r3, [r7, #16]
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	613b      	str	r3, [r7, #16]
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	693b      	ldr	r3, [r7, #16]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	007a1200 	.word	0x007a1200
 8001a10:	08002b00 	.word	0x08002b00
 8001a14:	08002b10 	.word	0x08002b10
 8001a18:	003d0900 	.word	0x003d0900

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff2 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08002af8 	.word	0x08002af8

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	0adb      	lsrs	r3, r3, #11
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	08002af8 	.word	0x08002af8

08001a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <RCC_Delay+0x34>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <RCC_Delay+0x38>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0a5b      	lsrs	r3, r3, #9
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a9c:	bf00      	nop
  }
  while (Delay --);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <RCC_Delay+0x1c>
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d07d      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10d      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	61d3      	str	r3, [r2, #28]
 8001af4:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d118      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a42      	ldr	r2, [pc, #264]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1c:	f7fe ff40 	bl	80009a0 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	e008      	b.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7fe ff3c 	bl	80009a0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e06d      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d02e      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d027      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b60:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b70:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d014      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7fe ff0b 	bl	80009a0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7fe ff07 	bl	80009a0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e036      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4917      	ldr	r1, [pc, #92]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	490b      	ldr	r1, [pc, #44]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4904      	ldr	r1, [pc, #16]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40007000 	.word	0x40007000
 8001c24:	42420440 	.word	0x42420440

08001c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e076      	b.n	8001d28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d108      	bne.n	8001c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c4a:	d009      	beq.n	8001c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
 8001c52:	e005      	b.n	8001c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fd8a 	bl	8000794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	0c1a      	lsrs	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f002 0204 	and.w	r2, r2, #4
 8001d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e042      	b.n	8001dc8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fd66 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2224      	movs	r2, #36	; 0x24
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fdc5 	bl	8002904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d16d      	bne.n	8001ecc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_UART_Transmit+0x2c>
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e066      	b.n	8001ece <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2221      	movs	r2, #33	; 0x21
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e0e:	f7fe fdc7 	bl	80009a0 <HAL_GetTick>
 8001e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e28:	d108      	bne.n	8001e3c <HAL_UART_Transmit+0x6c>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d104      	bne.n	8001e3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	e003      	b.n	8001e44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e44:	e02a      	b.n	8001e9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fb14 	bl	800247e <UART_WaitOnFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e036      	b.n	8001ece <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	e007      	b.n	8001e8e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1cf      	bne.n	8001e46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fae4 	bl	800247e <UART_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e006      	b.n	8001ece <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e000      	b.n	8001ece <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ecc:	2302      	movs	r3, #2
  }
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3720      	adds	r7, #32
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d112      	bne.n	8001f16 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_UART_Receive_IT+0x26>
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00b      	b.n	8001f18 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fb24 	bl	800255a <UART_Start_Receive_IT>
 8001f12:	4603      	mov	r3, r0
 8001f14:	e000      	b.n	8001f18 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0ba      	sub	sp, #232	; 0xe8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_UART_IRQHandler+0x66>
 8001f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fc01 	bl	8002786 <UART_Receive_IT>
      return;
 8001f84:	e25b      	b.n	800243e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80de 	beq.w	800214c <HAL_UART_IRQHandler+0x22c>
 8001f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80d1 	beq.w	800214c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_UART_IRQHandler+0xae>
 8001fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_UART_IRQHandler+0xd2>
 8001fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f043 0202 	orr.w	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_UART_IRQHandler+0xf6>
 8001ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f043 0204 	orr.w	r2, r3, #4
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d011      	beq.n	8002046 <HAL_UART_IRQHandler+0x126>
 8002022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800202e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f043 0208 	orr.w	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 81f2 	beq.w	8002434 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_UART_IRQHandler+0x14e>
 800205c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb8c 	bl	8002786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <HAL_UART_IRQHandler+0x17a>
 8002092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d04f      	beq.n	800213a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa96 	bl	80025cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d041      	beq.n	8002132 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3314      	adds	r3, #20
 80020b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020bc:	e853 3f00 	ldrex	r3, [r3]
 80020c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80020c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3314      	adds	r3, #20
 80020d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020ea:	e841 2300 	strex	r3, r2, [r1]
 80020ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1d9      	bne.n	80020ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d013      	beq.n	800212a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	4a7e      	ldr	r2, [pc, #504]	; (8002300 <HAL_UART_IRQHandler+0x3e0>)
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe feb2 	bl	8000e78 <HAL_DMA_Abort_IT>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d016      	beq.n	8002148 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002124:	4610      	mov	r0, r2
 8002126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002128:	e00e      	b.n	8002148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f993 	bl	8002456 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002130:	e00a      	b.n	8002148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f98f 	bl	8002456 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002138:	e006      	b.n	8002148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f98b 	bl	8002456 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002146:	e175      	b.n	8002434 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002148:	bf00      	nop
    return;
 800214a:	e173      	b.n	8002434 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	2b01      	cmp	r3, #1
 8002152:	f040 814f 	bne.w	80023f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8148 	beq.w	80023f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8141 	beq.w	80023f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80b6 	beq.w	8002304 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8145 	beq.w	8002438 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021b6:	429a      	cmp	r2, r3
 80021b8:	f080 813e 	bcs.w	8002438 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	f000 8088 	beq.w	80022e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	330c      	adds	r3, #12
 80021d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021de:	e853 3f00 	ldrex	r3, [r3]
 80021e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330c      	adds	r3, #12
 80021f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002204:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002208:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1d9      	bne.n	80021d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3314      	adds	r3, #20
 8002222:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002226:	e853 3f00 	ldrex	r3, [r3]
 800222a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800222c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3314      	adds	r3, #20
 800223c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002240:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002244:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002246:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002248:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800224c:	e841 2300 	strex	r3, r2, [r1]
 8002250:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e1      	bne.n	800221c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3314      	adds	r3, #20
 800225e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002262:	e853 3f00 	ldrex	r3, [r3]
 8002266:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800226e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3314      	adds	r3, #20
 8002278:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800227c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002280:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002282:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002284:	e841 2300 	strex	r3, r2, [r1]
 8002288:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800228a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e3      	bne.n	8002258 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b0:	f023 0310 	bic.w	r3, r3, #16
 80022b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80022c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80022c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80022d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e3      	bne.n	800229e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fd91 	bl	8000e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8b6 	bl	8002468 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022fc:	e09c      	b.n	8002438 <HAL_UART_IRQHandler+0x518>
 80022fe:	bf00      	nop
 8002300:	08002691 	.word	0x08002691
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800230c:	b29b      	uxth	r3, r3
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 808e 	beq.w	800243c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8089 	beq.w	800243c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	330c      	adds	r3, #12
 800234a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800234e:	647a      	str	r2, [r7, #68]	; 0x44
 8002350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e3      	bne.n	800232a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3314      	adds	r3, #20
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	623b      	str	r3, [r7, #32]
   return(result);
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3314      	adds	r3, #20
 8002382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002386:	633a      	str	r2, [r7, #48]	; 0x30
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800238c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238e:	e841 2300 	strex	r3, r2, [r1]
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e3      	bne.n	8002362 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	e853 3f00 	ldrex	r3, [r3]
 80023b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0310 	bic.w	r3, r3, #16
 80023be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80023cc:	61fa      	str	r2, [r7, #28]
 80023ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	69b9      	ldr	r1, [r7, #24]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	e841 2300 	strex	r3, r2, [r1]
 80023d8:	617b      	str	r3, [r7, #20]
   return(result);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e3      	bne.n	80023a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f83b 	bl	8002468 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023f2:	e023      	b.n	800243c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <HAL_UART_IRQHandler+0x4f4>
 8002400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f953 	bl	80026b8 <UART_Transmit_IT>
    return;
 8002412:	e014      	b.n	800243e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00e      	beq.n	800243e <HAL_UART_IRQHandler+0x51e>
 8002420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f992 	bl	8002756 <UART_EndTransmit_IT>
    return;
 8002432:	e004      	b.n	800243e <HAL_UART_IRQHandler+0x51e>
    return;
 8002434:	bf00      	nop
 8002436:	e002      	b.n	800243e <HAL_UART_IRQHandler+0x51e>
      return;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <HAL_UART_IRQHandler+0x51e>
      return;
 800243c:	bf00      	nop
  }
}
 800243e:	37e8      	adds	r7, #232	; 0xe8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b090      	sub	sp, #64	; 0x40
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248e:	e050      	b.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d04c      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <UART_WaitOnFlagUntilTimeout+0x30>
 800249e:	f7fe fa7f 	bl	80009a0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d241      	bcs.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ce:	637a      	str	r2, [r7, #52]	; 0x34
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e5      	bne.n	80024ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3314      	adds	r3, #20
 80024e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	613b      	str	r3, [r7, #16]
   return(result);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3314      	adds	r3, #20
 8002500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002502:	623a      	str	r2, [r7, #32]
 8002504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	69f9      	ldr	r1, [r7, #28]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e5      	bne.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e00f      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	429a      	cmp	r2, r3
 800254e:	d09f      	beq.n	8002490 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3740      	adds	r7, #64	; 0x40
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	4613      	mov	r3, r2
 8002566:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	88fa      	ldrh	r2, [r7, #6]
 8002572:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2222      	movs	r2, #34	; 0x22
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0220 	orr.w	r2, r2, #32
 80025be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b095      	sub	sp, #84	; 0x54
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025de:	e853 3f00 	ldrex	r3, [r3]
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025f4:	643a      	str	r2, [r7, #64]	; 0x40
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e5      	bne.n	80025d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3314      	adds	r3, #20
 800260e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	e853 3f00 	ldrex	r3, [r3]
 8002616:	61fb      	str	r3, [r7, #28]
   return(result);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800262e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002630:	e841 2300 	strex	r3, r2, [r1]
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e5      	bne.n	8002608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	2b01      	cmp	r3, #1
 8002642:	d119      	bne.n	8002678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	e853 3f00 	ldrex	r3, [r3]
 8002652:	60bb      	str	r3, [r7, #8]
   return(result);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f023 0310 	bic.w	r3, r3, #16
 800265a:	647b      	str	r3, [r7, #68]	; 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002664:	61ba      	str	r2, [r7, #24]
 8002666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002668:	6979      	ldr	r1, [r7, #20]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	e841 2300 	strex	r3, r2, [r1]
 8002670:	613b      	str	r3, [r7, #16]
   return(result);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e5      	bne.n	8002644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002686:	bf00      	nop
 8002688:	3754      	adds	r7, #84	; 0x54
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7ff fed3 	bl	8002456 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b21      	cmp	r3, #33	; 0x21
 80026ca:	d13e      	bne.n	800274a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	d114      	bne.n	8002700 <UART_Transmit_IT+0x48>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d110      	bne.n	8002700 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	1c9a      	adds	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	621a      	str	r2, [r3, #32]
 80026fe:	e008      	b.n	8002712 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	1c59      	adds	r1, r3, #1
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6211      	str	r1, [r2, #32]
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4619      	mov	r1, r3
 8002720:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002734:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002744:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fe64 	bl	8002444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b08c      	sub	sp, #48	; 0x30
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b22      	cmp	r3, #34	; 0x22
 8002798:	f040 80ae 	bne.w	80028f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a4:	d117      	bne.n	80027d6 <UART_Receive_IT+0x50>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d113      	bne.n	80027d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	1c9a      	adds	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
 80027d4:	e026      	b.n	8002824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e8:	d007      	beq.n	80027fa <UART_Receive_IT+0x74>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <UART_Receive_IT+0x82>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e008      	b.n	800281a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002814:	b2da      	uxtb	r2, r3
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29b      	uxth	r3, r3
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4619      	mov	r1, r3
 8002832:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002834:	2b00      	cmp	r3, #0
 8002836:	d15d      	bne.n	80028f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0220 	bic.w	r2, r2, #32
 8002846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	2b01      	cmp	r3, #1
 800287c:	d135      	bne.n	80028ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	613b      	str	r3, [r7, #16]
   return(result);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 0310 	bic.w	r3, r3, #16
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	623a      	str	r2, [r7, #32]
 80028a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	69f9      	ldr	r1, [r7, #28]
 80028aa:	6a3a      	ldr	r2, [r7, #32]
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e5      	bne.n	8002884 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d10a      	bne.n	80028dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fdc0 	bl	8002468 <HAL_UARTEx_RxEventCallback>
 80028e8:	e002      	b.n	80028f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd fca2 	bl	8000234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e002      	b.n	80028fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3730      	adds	r7, #48	; 0x30
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800293e:	f023 030c 	bic.w	r3, r3, #12
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	430b      	orrs	r3, r1
 800294a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <UART_SetConfig+0x114>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d103      	bne.n	8002974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800296c:	f7ff f874 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	e002      	b.n	800297a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002974:	f7ff f85c 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8002978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009a      	lsls	r2, r3, #2
 8002984:	441a      	add	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <UART_SetConfig+0x118>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	0119      	lsls	r1, r3, #4
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009a      	lsls	r2, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <UART_SetConfig+0x118>)
 80029b2:	fba3 0302 	umull	r0, r3, r3, r2
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2064      	movs	r0, #100	; 0x64
 80029ba:	fb00 f303 	mul.w	r3, r0, r3
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	3332      	adds	r3, #50	; 0x32
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <UART_SetConfig+0x118>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	4419      	add	r1, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009a      	lsls	r2, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <UART_SetConfig+0x118>)
 80029ea:	fba3 0302 	umull	r0, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2064      	movs	r0, #100	; 0x64
 80029f2:	fb00 f303 	mul.w	r3, r0, r3
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	3332      	adds	r3, #50	; 0x32
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <UART_SetConfig+0x118>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	51eb851f 	.word	0x51eb851f

08002a20 <__libc_init_array>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	2600      	movs	r6, #0
 8002a24:	4d0c      	ldr	r5, [pc, #48]	; (8002a58 <__libc_init_array+0x38>)
 8002a26:	4c0d      	ldr	r4, [pc, #52]	; (8002a5c <__libc_init_array+0x3c>)
 8002a28:	1b64      	subs	r4, r4, r5
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	42a6      	cmp	r6, r4
 8002a2e:	d109      	bne.n	8002a44 <__libc_init_array+0x24>
 8002a30:	f000 f822 	bl	8002a78 <_init>
 8002a34:	2600      	movs	r6, #0
 8002a36:	4d0a      	ldr	r5, [pc, #40]	; (8002a60 <__libc_init_array+0x40>)
 8002a38:	4c0a      	ldr	r4, [pc, #40]	; (8002a64 <__libc_init_array+0x44>)
 8002a3a:	1b64      	subs	r4, r4, r5
 8002a3c:	10a4      	asrs	r4, r4, #2
 8002a3e:	42a6      	cmp	r6, r4
 8002a40:	d105      	bne.n	8002a4e <__libc_init_array+0x2e>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a48:	4798      	blx	r3
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7ee      	b.n	8002a2c <__libc_init_array+0xc>
 8002a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a52:	4798      	blx	r3
 8002a54:	3601      	adds	r6, #1
 8002a56:	e7f2      	b.n	8002a3e <__libc_init_array+0x1e>
 8002a58:	08002b14 	.word	0x08002b14
 8002a5c:	08002b14 	.word	0x08002b14
 8002a60:	08002b14 	.word	0x08002b14
 8002a64:	08002b18 	.word	0x08002b18

08002a68 <memset>:
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4402      	add	r2, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <_init>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr

08002a84 <_fini>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr
